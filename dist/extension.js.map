{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://code-gatherer/./src/codeGathererTreeDataProvider.ts","webpack://code-gatherer/./src/fileGenerator.ts","webpack://code-gatherer/external commonjs \"vscode\"","webpack://code-gatherer/external node-commonjs \"fs\"","webpack://code-gatherer/external node-commonjs \"path\"","webpack://code-gatherer/webpack/bootstrap","webpack://code-gatherer/./src/extension.ts"],"sourcesContent":["import * as fs from \"fs\";\nimport * as path from \"path\";\nimport * as vscode from \"vscode\";\n\nexport class CodeGathererTreeItem extends vscode.TreeItem {\n  constructor(\n    public readonly label: string,\n    public readonly collapsibleState: vscode.TreeItemCollapsibleState,\n    public readonly isFolder: boolean,\n    public readonly fullPath: string,\n    public isSelected: boolean = false,\n    public parent: CodeGathererTreeItem | undefined = undefined\n  ) {\n    super(label, collapsibleState);\n    this.contextValue = isFolder ? \"folder\" : \"file\";\n    this.resourceUri = vscode.Uri.file(fullPath);\n    this.updateDescription();\n  }\n\n  updateDescription(): void {\n    if (this.isSelected) {\n      this.description = \"Selected\";\n      this.iconPath = new vscode.ThemeIcon(\n        \"check\",\n        new vscode.ThemeColor(\"charts.green\")\n      );\n    } else {\n      this.description = \"\";\n      this.iconPath = this.isFolder\n        ? new vscode.ThemeIcon(\"folder\")\n        : new vscode.ThemeIcon(\"file\");\n    }\n  }\n}\n\nexport class CodeGathererTreeDataProvider\n  implements vscode.TreeDataProvider<CodeGathererTreeItem>\n{\n  private _onDidChangeTreeData: vscode.EventEmitter<\n    CodeGathererTreeItem | undefined | null | void\n  > = new vscode.EventEmitter<CodeGathererTreeItem | undefined | null | void>();\n  readonly onDidChangeTreeData: vscode.Event<\n    CodeGathererTreeItem | undefined | null | void\n  > = this._onDidChangeTreeData.event;\n\n  private items: Map<string, CodeGathererTreeItem> = new Map();\n\n  constructor(private workspaceRoot: string) {}\n\n  getTreeItem(element: CodeGathererTreeItem): vscode.TreeItem {\n    return element;\n  }\n\n  getChildren(element?: CodeGathererTreeItem): Promise<CodeGathererTreeItem[]> {\n    if (!this.workspaceRoot) {\n      vscode.window.showInformationMessage(\"No workspace folder open\");\n      return Promise.resolve([]);\n    }\n\n    if (element) {\n      return this.getFileItems(element.fullPath, element);\n    } else {\n      return this.getFileItems(this.workspaceRoot);\n    }\n  }\n\n  private async getFileItems(\n    folderPath: string,\n    parent?: CodeGathererTreeItem\n  ): Promise<CodeGathererTreeItem[]> {\n    try {\n      const items = await fs.promises.readdir(folderPath);\n      const filteredItems = items.filter(\n        (item) => item !== \"ai\" && item !== \"CodeGatherer\"\n      );\n      const treeItems: CodeGathererTreeItem[] = [];\n\n      for (const item of filteredItems) {\n        const fullPath = path.join(folderPath, item);\n        try {\n          const stat = await fs.promises.stat(fullPath);\n          const treeItem = new CodeGathererTreeItem(\n            item,\n            stat.isDirectory()\n              ? vscode.TreeItemCollapsibleState.Collapsed\n              : vscode.TreeItemCollapsibleState.None,\n            stat.isDirectory(),\n            fullPath,\n            false,\n            parent\n          );\n          this.items.set(fullPath, treeItem);\n          treeItems.push(treeItem);\n        } catch (error) {\n          console.error(`Error processing file ${fullPath}:`, error);\n        }\n      }\n\n      return treeItems;\n    } catch (error) {\n      console.error(`Error reading directory ${folderPath}:`, error);\n      return [];\n    }\n  }\n\n  getParent(\n    element: CodeGathererTreeItem\n  ): vscode.ProviderResult<CodeGathererTreeItem> {\n    return element.parent;\n  }\n\n  toggleSelection(item: CodeGathererTreeItem): void {\n    item.isSelected = !item.isSelected;\n    item.updateDescription();\n    this._onDidChangeTreeData.fire(item);\n\n    // Toggle selection for all children if it's a folder\n    if (item.isFolder) {\n      this.toggleSelectionRecursive(item);\n    }\n  }\n\n  private toggleSelectionRecursive(item: CodeGathererTreeItem): void {\n    for (const [, child] of this.items) {\n      if (child.fullPath.startsWith(item.fullPath) && child !== item) {\n        child.isSelected = item.isSelected;\n        child.updateDescription();\n        this._onDidChangeTreeData.fire(child);\n      }\n    }\n  }\n\n  getSelectedItems(): string[] {\n    return Array.from(this.items.values())\n      .filter((item) => item.isSelected)\n      .map((item) => item.fullPath);\n  }\n\n  refresh(): void {\n    this._onDidChangeTreeData.fire();\n  }\n}\n","import * as fs from \"fs\";\nimport * as path from \"path\";\nimport * as vscode from \"vscode\";\n\nconst MAX_CHARACTERS = 800000; // Approximately 800,000 characters\n\nexport async function generateFiles(\n  selectedItems: string[],\n  progress: vscode.Progress<{ message?: string; increment?: number }>\n): Promise<string[]> {\n  const outputFolder = path.join(\n    vscode.workspace.workspaceFolders![0].uri.fsPath,\n    \"CodeGatherer\"\n  );\n  if (!fs.existsSync(outputFolder)) {\n    fs.mkdirSync(outputFolder);\n  }\n\n  const timestamp = new Date().toISOString().replace(/[:]/g, \"-\").split(\".\")[0];\n  let fileIndex = 0;\n  let currentFileContent = \"\";\n  let currentCharCount = 0;\n  const generatedFiles: string[] = [];\n\n  const writeFile = () => {\n    if (currentFileContent) {\n      const fileName = path.join(\n        outputFolder,\n        `code-analysis-${timestamp}-${fileIndex}.md`\n      );\n      fs.writeFileSync(fileName, currentFileContent);\n      generatedFiles.push(fileName);\n      fileIndex++;\n      currentFileContent = \"\";\n      currentCharCount = 0;\n    }\n  };\n\n  currentFileContent += `# Code Analysis for AI Assistant\n\nThis document contains code from the project for analysis and improvement. Please review and study this existing code and provide production-ready code with file names and file paths. Make sure to provide a separate artifact for each file.\n\n`;\n\n  const totalItems = selectedItems.length;\n  let processedItems = 0;\n\n  for (const item of selectedItems) {\n    if (fs.statSync(item).isDirectory()) {\n      await processDirectory(item);\n    } else {\n      await processFile(item);\n    }\n    processedItems++;\n    progress.report({ increment: (processedItems / totalItems) * 100 });\n  }\n\n  writeFile(); // Write the last file if there's any content left\n\n  return generatedFiles;\n\n  async function processDirectory(dirPath: string): Promise<void> {\n    const files = await fs.promises.readdir(dirPath);\n    for (const file of files) {\n      const fullPath = path.join(dirPath, file);\n      if (fs.statSync(fullPath).isDirectory()) {\n        await processDirectory(fullPath);\n      } else {\n        await processFile(fullPath);\n      }\n    }\n  }\n\n  async function processFile(filePath: string): Promise<void> {\n    const relativePath = path.relative(\n      vscode.workspace.workspaceFolders![0].uri.fsPath,\n      filePath\n    );\n    const fileContent = await fs.promises.readFile(filePath, \"utf8\");\n    const fileExtension = path.extname(filePath).toLowerCase();\n    const language = getLanguageFromExtension(fileExtension);\n\n    const content = `\\n## File: ${relativePath}\\n\\nHere is the existing code for ${relativePath}:\\n\\n\\`\\`\\`${language}\\n${fileContent}\\n\\`\\`\\`\\n`;\n\n    if (currentCharCount + content.length > MAX_CHARACTERS) {\n      writeFile();\n      currentFileContent += `\\n\\n(Continued from previous file)\\n\\n`;\n    }\n\n    currentFileContent += content;\n    currentCharCount += content.length;\n  }\n}\n\nexport async function copyFirstFileToClipboard(\n  generatedFiles: string[]\n): Promise<void> {\n  if (generatedFiles.length > 0) {\n    const content = await fs.promises.readFile(generatedFiles[0], \"utf8\");\n    await vscode.env.clipboard.writeText(content);\n  }\n}\n\nfunction getLanguageFromExtension(extension: string): string {\n  const languageMap: { [key: string]: string } = {\n    // Web development\n    \".html\": \"html\",\n    \".htm\": \"html\",\n    \".css\": \"css\",\n    \".scss\": \"scss\",\n    \".sass\": \"sass\",\n    \".less\": \"less\",\n    \".js\": \"javascript\",\n    \".jsx\": \"jsx\",\n    \".ts\": \"typescript\",\n    \".tsx\": \"tsx\",\n    \".json\": \"json\",\n    \".xml\": \"xml\",\n    \".svg\": \"svg\",\n\n    // Server-side languages\n    \".php\": \"php\",\n    \".py\": \"python\",\n    \".rb\": \"ruby\",\n    \".java\": \"java\",\n    \".class\": \"java\",\n    \".cs\": \"csharp\",\n    \".go\": \"go\",\n    \".rs\": \"rust\",\n    \".scala\": \"scala\",\n    \".kt\": \"kotlin\",\n    \".kts\": \"kotlin\",\n    \".groovy\": \"groovy\",\n    \".gradle\": \"gradle\",\n\n    // Shell and scripting\n    \".sh\": \"bash\",\n    \".bash\": \"bash\",\n    \".zsh\": \"zsh\",\n    \".fish\": \"fish\",\n    \".ps1\": \"powershell\",\n    \".bat\": \"batch\",\n    \".cmd\": \"batch\",\n    \".vbs\": \"vbscript\",\n    \".vb\": \"vb\",\n    \".pl\": \"perl\",\n    \".pm\": \"perl\",\n    \".t\": \"perl\",\n    \".lua\": \"lua\",\n\n    // Markup and config\n    \".md\": \"markdown\",\n    \".markdown\": \"markdown\",\n    \".yaml\": \"yaml\",\n    \".yml\": \"yaml\",\n    \".toml\": \"toml\",\n    \".ini\": \"ini\",\n    \".cfg\": \"ini\",\n    \".conf\": \"conf\",\n    \".properties\": \"properties\",\n\n    // C-family languages\n    \".c\": \"c\",\n    \".h\": \"c\",\n    \".cpp\": \"cpp\",\n    \".hpp\": \"cpp\",\n    \".cc\": \"cpp\",\n    \".cxx\": \"cpp\",\n    \".m\": \"objectivec\",\n    \".mm\": \"objectivec\",\n\n    // Database\n    \".sql\": \"sql\",\n    \".mysql\": \"sql\",\n    \".pgsql\": \"sql\",\n    \".plsql\": \"plsql\",\n\n    // Other programming languages\n    \".hs\": \"haskell\",\n    \".lhs\": \"haskell\",\n    \".elm\": \"elm\",\n    \".clj\": \"clojure\",\n    \".cljs\": \"clojure\",\n    \".cljc\": \"clojure\",\n    \".erl\": \"erlang\",\n    \".ex\": \"elixir\",\n    \".exs\": \"elixir\",\n    \".eex\": \"elixir\",\n    \".r\": \"r\",\n    \".rmd\": \"rmd\",\n    \".jl\": \"julia\",\n    \".dart\": \"dart\",\n    \".f\": \"fortran\",\n    \".f90\": \"fortran\",\n    \".fs\": \"fsharp\",\n    \".fsx\": \"fsharp\",\n    \".pas\": \"pascal\",\n    \".d\": \"d\",\n    \".v\": \"v\",\n    \".nim\": \"nim\",\n    \".cr\": \"crystal\",\n\n    // Web assembly\n    \".wat\": \"wat\",\n    \".wasm\": \"wasm\",\n\n    // Game development\n    \".gd\": \"gdscript\",\n    \".as\": \"actionscript\",\n\n    // DevOps and infrastructure\n    \".tf\": \"terraform\",\n    \".tfvars\": \"terraform\",\n    \".hcl\": \"hcl\",\n    \".dockerfile\": \"dockerfile\",\n    \".dockerignore\": \"dockerignore\",\n    \".vagrantfile\": \"ruby\",\n    \".jenkinsfile\": \"groovy\",\n\n    // Data serialization\n    \".proto\": \"protobuf\",\n    \".thrift\": \"thrift\",\n\n    // Template engines\n    \".ejs\": \"ejs\",\n    \".pug\": \"pug\",\n    \".hbs\": \"handlebars\",\n    \".mustache\": \"mustache\",\n    \".twig\": \"twig\",\n    \".liquid\": \"liquid\",\n\n    // Others\n    \".graphql\": \"graphql\",\n    \".dot\": \"dot\",\n    \".tex\": \"latex\",\n    \".rst\": \"restructuredtext\",\n    \".asciidoc\": \"asciidoc\",\n    \".adoc\": \"asciidoc\",\n\n    // Mobile development (without duplicates)\n    \".swift\": \"swift\",\n  };\n\n  return languageMap[extension.toLowerCase()] || \"plaintext\";\n}\n","module.exports = require(\"vscode\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import * as vscode from \"vscode\";\nimport { CodeGathererTreeDataProvider } from \"./codeGathererTreeDataProvider\";\nimport { copyFirstFileToClipboard, generateFiles } from \"./fileGenerator\";\n\nexport function activate(context: vscode.ExtensionContext) {\n  console.log(\"Code Gatherer extension is now active!\");\n\n  const workspaceRoot =\n    vscode.workspace.workspaceFolders &&\n    vscode.workspace.workspaceFolders.length > 0\n      ? vscode.workspace.workspaceFolders[0].uri.fsPath\n      : undefined;\n\n  if (!workspaceRoot) {\n    vscode.window.showErrorMessage(\n      \"Code Gatherer requires a workspace folder to be opened.\"\n    );\n    return;\n  }\n\n  const treeDataProvider = new CodeGathererTreeDataProvider(workspaceRoot);\n  const treeView = vscode.window.createTreeView(\"codeGathererTree\", {\n    treeDataProvider: treeDataProvider,\n    canSelectMany: false,\n  });\n\n  context.subscriptions.push(\n    vscode.commands.registerCommand(\"codeGatherer.togglePanel\", () => {\n      vscode.commands.executeCommand(\n        \"workbench.view.extension.code-gatherer-explorer\"\n      );\n    })\n  );\n\n  context.subscriptions.push(\n    vscode.commands.registerCommand(\"codeGatherer.generateFiles\", async () => {\n      const selectedItems = treeDataProvider.getSelectedItems();\n      if (selectedItems.length === 0) {\n        vscode.window.showWarningMessage(\n          \"No items selected. Please select files or folders to generate AI analysis files.\"\n        );\n        return;\n      }\n\n      vscode.window.withProgress(\n        {\n          location: vscode.ProgressLocation.Notification,\n          title: \"Generating files for AI analysis...\",\n          cancellable: false,\n        },\n        async (progress) => {\n          try {\n            const files = await generateFiles(selectedItems, progress);\n            await copyFirstFileToClipboard(files);\n            vscode.window.showInformationMessage(\n              `Generated ${files.length} file(s) for AI analysis. Content of the first file has been copied to clipboard.`\n            );\n\n            if (files.length > 0) {\n              const document = await vscode.workspace.openTextDocument(\n                files[0]\n              );\n              await vscode.window.showTextDocument(document);\n            }\n          } catch (error) {\n            if (error instanceof Error) {\n              vscode.window.showErrorMessage(\n                `Error generating files: ${error.message}`\n              );\n            } else {\n              vscode.window.showErrorMessage(\n                \"An unknown error occurred while generating files.\"\n              );\n            }\n          }\n        }\n      );\n    })\n  );\n\n  treeView.onDidChangeSelection((event) => {\n    if (event.selection.length > 0) {\n      treeDataProvider.toggleSelection(event.selection[0]);\n    }\n  });\n\n  context.subscriptions.push(treeView);\n}\n\nexport function deactivate() {}\n"],"names":["CodeGathererTreeItem","vscode","TreeItem","constructor","label","collapsibleState","isFolder","fullPath","isSelected","parent","undefined","super","this","contextValue","resourceUri","Uri","file","updateDescription","description","iconPath","ThemeIcon","ThemeColor","workspaceRoot","_onDidChangeTreeData","EventEmitter","onDidChangeTreeData","event","items","Map","getTreeItem","element","getChildren","getFileItems","window","showInformationMessage","Promise","resolve","folderPath","filteredItems","fs","promises","readdir","filter","item","treeItems","path","join","stat","treeItem","isDirectory","TreeItemCollapsibleState","Collapsed","None","set","push","error","console","getParent","toggleSelection","fire","toggleSelectionRecursive","child","startsWith","getSelectedItems","Array","from","values","map","refresh","async","selectedItems","progress","outputFolder","workspace","workspaceFolders","uri","fsPath","existsSync","mkdirSync","timestamp","Date","toISOString","replace","split","fileIndex","currentFileContent","currentCharCount","generatedFiles","writeFile","fileName","writeFileSync","totalItems","length","processedItems","statSync","processDirectory","processFile","report","increment","dirPath","files","filePath","relativePath","relative","fileContent","readFile","content","extname","toLowerCase","MAX_CHARACTERS","env","clipboard","writeText","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","context","log","showErrorMessage","treeDataProvider","CodeGathererTreeDataProvider","treeView","createTreeView","canSelectMany","subscriptions","commands","registerCommand","executeCommand","withProgress","location","ProgressLocation","Notification","title","cancellable","generateFiles","copyFirstFileToClipboard","document","openTextDocument","showTextDocument","Error","message","showWarningMessage","onDidChangeSelection","selection"],"sourceRoot":""}